public class Solution {
    public String solve(int A, int B, int C, int D, ArrayList<Integer> E, ArrayList<Integer> F) {
      boolean [][]vis=new boolean[A+1][B+1];
      
           

      for(int i=0;i<A+1;i++)
      for(int j=0;j<B+1;j++)
      for(int k=0;k<C;k++){
if(((i-E.get(k))(i-E.get(k)))+((j-F.get(k))(j-F.get(k)))<=D*D){
vis[i][j]=1;
break;
         //   if((x<=E.get(i)+D||y<=F.get(i)+D)&&(x>=E.get(i)-D||y>=F.get(i)-D)&&(x>=E.get(i)-D||y<=F.get(i)+D)||(x<=E.get(i)+D&&y>=F.get(i)-D))return false;
       // if(D==0)vis[E.get(i)][F.get(i)]=true;
        // if (Math.pow((x-E.get(i)),2)+Math.pow((y-F.get(i)),2)-Math.pow(D,2)<=0)vis[x][y]=true;  
        }}
      
     // for(int i=0;i<A;i++){
       //   for(int j=0;j<B;j++){
              if(!vis[0][0])
              if(find(0,0,A,B,C,D,E,F,vis))return "YES";
         // }
      //}
        return "NO";
    }
    public boolean valid(int x, int y,int A, int B, int C, int D, ArrayList<Integer> E, ArrayList<Integer> F,boolean [][]vis){
        if(x<0||y<0||x>A||y>B||vis[x][y])return false;
        /*for(int i=0;i<C;i++){
         //   if((x<=E.get(i)+D||y<=F.get(i)+D)&&(x>=E.get(i)-D||y>=F.get(i)-D)&&(x>=E.get(i)-D||y<=F.get(i)+D)||(x<=E.get(i)+D&&y>=F.get(i)-D))return false;
        if (Math.pow((x-E.get(i)),2)+Math.pow((y-F.get(i)),2)-Math.pow(D,2)<=0)return false;  
        }*/
        return true;
        
    }
    public boolean find(int x, int y,int A, int B, int C, int D, ArrayList<Integer> E, ArrayList<Integer> F,boolean [][]vis){
             if(x==A&&y==B)return true;
             if(x>A||y>B||vis[x][y])return false;
              vis[x][y]=true;
              boolean res=false;
              int[][]dir={{0,1},{1,0},{0,-1},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};
           for(int i=0;i<8;i++){
                   int a=x+dir[i][0];
                   int b=y+dir[i][1];
                        if(valid(a,b,A,B,C,D,E,F,vis))
                    res=res||find(a,b,A,B,C,D,E,F,vis);
              }
            // vis[x][y]=false;
              return res;
        
    }
}
